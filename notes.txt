Arrays

Introduction
This chapter explores the array: reading, changing, as well as adding and removing elements (which change the array’s length). Before chapter’s end, we touch on associative arrays as well. At this point we expect you to quickly complete the 13 mandatory algorithm challenges. If building any of the following array-inspection functions such as min(arr), max(arr), sum(arr)and average(arr) is still a bit difficult or takes more more than a couple minutes to solve, we encourage you to back to the Algo App Challenges to practice re-writing those functions before attempting the first assignment.

Let’s review!
Declaring a new array:
var myArr = [];
console.log(myArr.length); // -> "0"
Setting and accessing array values:
myArr[0] = 42; // myArr == [42], length==1
console.log(myArr[0]); // -> "42"
Array.length is determined by largest index:
myArr[1] = "hi"; // myArr == [42,"hi"], length==2
myArr[2] = true; // myArr == [42,"hi",true], length==3
Arrays can be sparsely populated:
myArr[myArr.length+1] = 2; // myArr == [42,"hi",true,undefined,2]
console.log(myArr.length); // -> "5"
Overwriting array values:
myArr[0] = 101; // myArr == [101,"hi",true,undefined,2]
myArr[3] = "MG"; // myArr == [101,"hi",true,"MG",2]
Shorten arrays with pop(), lengthen with push():
myArr.pop(); // myArr == [101,"hi",true,"MG"]
console.log(myArr.length); // -> "4"
myArr.push("dat"); // myArr == [101,"hi",true,"MG","dat"]
console.log(myArr.length); // -> "5"
Here is a list of concepts to consider; some or all will be used in this chapter.

Array.pop() & Array.push()
arrays grow: Array.length == lastIdx-1
if-else statements
for /while loops
arrays can contain different types
arrays are objects, passed by ref (ptr)

----------------------------------------------------------------
Solving Whiteboard Problems: Riot Walk
When Donald Knuth solved his Ph.D. thesis problem in less than two hours, he sent the whiteboard to his advisor’s office as proof! Actually, I made up that whiteboard part – but it makes a good segue….

 

No company ships code on whiteboards, but most software interviewers still require candidates to write software on those pesky white surfaces. Regardless of tech skills needed once you are employed, you first must land the job in the first place. So, you should start practicing your whiteboarding skills now.

Here’s the thing: technical interviewers don’t just want the correct code. They look for you to communicate, listen and respond. They expect you to break down problems logically. Got a consistent system? Ask and ye shall receive! OK maybe you didn’t ask, but here it is. Use it, to pleasantly stroll through even the most turbulent and taxing of technology tests. It’s called the RIOT WALK. Read on.

 

R – Recap
First, just restate the problem back. Use your own wording, not the word-for-word description given. Demonstrate that you understand the problem. Take the opportunity to ask clarifying questions – your interviewer will nod, contribute details, correct your description or otherwise reveal additional information.

 

IO – Inputs and Outputs
State a few inputs with their outputs. “For the IsOdd function, if I pass in 3, I expect true. For 6, I expect false. Am I thinking about that right?” Listen for confirmation, then move on.

 

T – Test Cases
Now you can channel your inner ETG*: in the whiteboard corner, list all the off-the-wall input parameters you can think of: negatives, non-integers, empty arrays, strings instead of arrays, really huge inputs, miraculously unlikely inputs, inputs that break the rules, missing parameters! For each of these, note the expected output (ask for clarification, if in doubt).

 

The space between RIOT and WALK is when you actually write the code. Yep, you still need to do this!

 

WALK – Walkthrough
Finally, walk line-by-line through the code you just wrote, using your Test Cases from above. Make sure that all test cases return the required outputs before you say you are done.

 

With RIOT WALK you articulate problems and solutions clearly, identify ambiguity, dig for clarity, create tricky test cases and methodically walk through your code. Interviewers will be impressed!


